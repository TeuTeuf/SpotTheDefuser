image: "registry.gitlab.com/teuteuf/unity3d:2018.2.6f1"

stages:
- check
- test
- build
- deploy

variables:
  BUILD_NAME: SpotTheDefuser

.unity_before_script: &unity_before_script
  before_script:
  - mkdir -p /root/.cache/unity3d
  - mkdir -p /root/.local/share/unity3d/Unity/
  - echo "$UNITY_LICENSE_CONTENT" | tr -d '\r' > /root/.local/share/unity3d/Unity/Unity_lic.ulf

check-cleanarchi:
  image: alpine:latest
  stage: check
  script: | 
    chmod +x Tools/checkCleanArchitecture.sh
    ./Tools/checkCleanArchitecture.sh

.test: &test
  stage: test
  <<: *unity_before_script
  script: |
    xvfb-run --auto-servernum --server-args='-screen 0 640x480x24' \
      /opt/Unity/Editor/Unity \
        -projectPath $(pwd) \
        -runTests \
        -testPlatform $TEST_PLATFORM \
        -testResults $(pwd)/$TEST_PLATFORM-results.xml \
        -batchmode
    UNITY_EXIT_CODE=$?
    if [ $UNITY_EXIT_CODE -eq 0 ]; then
      echo "Run succeeded, no failures occurred";
    elif [ $UNITY_EXIT_CODE -eq 2 ]; then
      echo "Run succeeded, some tests failed";
    elif [ $UNITY_EXIT_CODE -eq 3 ]; then
      echo "Run failure (other failure)";
    else
      echo "Unexpected exit code $UNITY_EXIT_CODE";
    fi
    exit $UNITY_TEST_EXIT_CODE

  artifacts:
    paths:
    - $(pwd)/$TEST_PLATFORM-results.xml

test-editmode:
  <<: *test
  variables:
    TEST_PLATFORM: editmode

test-playmode:
  <<: *test
  variables:
    TEST_PLATFORM: playmode

.build: &build
  stage: build
  <<: *unity_before_script
  variables:
  script: |
    echo "Building for $BUILD_TARGET"
    export BUILD_PATH=./Builds/$BUILD_TARGET/
    mkdir -p $BUILD_PATH
    xvfb-run --server-args="-screen 0 1024x768x24" \
      /opt/Unity/Editor/Unity \
      -projectPath $(pwd) \
      -quit \
      -batchmode \
      -buildTarget $BUILD_TARGET \
      -customBuildTarget $BUILD_TARGET \
      -customBuildName $BUILD_NAME \
      -customBuildPath $BUILD_PATH \
      -customBuildOptions AcceptExternalModificationsToPlayer \
      -executeMethod BuildCommand.PerformBuild \
      -logFile
    ls -la $BUILD_PATH
    [ -n "$(ls -A $BUILD_PATH)" ] # fail job if build folder is empty

  artifacts:
    paths:
    - ./Builds/
#   only:
#     - master

build-StandaloneLinux64:
  <<: *build
  variables:
    BUILD_TARGET: StandaloneLinux64

build-StandaloneOSX:
  image: registry.gitlab.com/teuteuf/unity3d:2018.2.6f1-mac
  <<: *build
  variables:
    BUILD_TARGET: StandaloneOSX

build-StandaloneWindows64:
  image: registry.gitlab.com/teuteuf/unity3d:2018.2.6f1-windows
  <<: *build
  variables:
    BUILD_TARGET: StandaloneWindows64

build-Android:
  image: registry.gitlab.com/teuteuf/unity3d:2018.2.6f1-android
  <<: *build
  variables:
    BUILD_TARGET: Android
  allow_failure: true

build-WebGL:
  image: registry.gitlab.com/teuteuf/unity3d:2018.2.6f1-webgl
  <<: *build
  variables:
    BUILD_TARGET: WebGL

pages:
  image: alpine:latest
  stage: deploy
  script:
  - mv ./Builds/WebGL public
  artifacts:
    paths:
    - public
  only:
  - master